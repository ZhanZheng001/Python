'''
题目描述
喊 7 是一个传统的聚会游戏， N 个人围成一圈，按顺时针从 1 到 N 编号。编号为 1 的人从
1 开始喊数，下一个人喊的数字为上一个人的数字加 1，但是当数字是 7 的倍数或者数字本
身含有 7 的话，要喊"过"。

现给定一个长度为 N 的数组，存储了打乱顺序的每个人喊"过"的次数，请把它还原成正确的顺序，即数组的第 i 个元素存储编号 i 的人喊"过"的次数。

输入为一行，为空格分隔的喊"过"的次数，

示例 1
输入：
0 1 0
输出：
1 0 0

说明
一共只有一次喊"过"，那只会发生在需要喊 7 时，按顺序，编号为 1 的人会遇到 7，故输出
1 0 0。注意，结束时的 K 不一定是 7，也可以是 8、 9 等，喊过的次数都是 1 0 0。

示例 2
输入：
0 0 0 2 1
输出：
0 2 0 1 0

说明
一共有三次喊"过"，发生在 7 14 17，按顺序，编号为 2 的人会遇到 7 17，编号为 4 的人会遇到 14，故输出 0 2 0 1 0。

参考代码
思路是 模拟喊的过程；
我们使用 dp 保存 每个人喊 7 的次数；
当 dp 中的最大次数 不小与 输入 的最大次数时退出。


'''
while 1:
    try:
        nums = list(map(int, input().split()))

        lens = len(nums)
        max_ = max(nums)

        dp = [0] * lens
        i = 1
        while max(dp) < max_:
            if i % 7 == 0 or "7" in str(i):
                dp[(i % lens) - 1] += 1
            i += 1

        print(dp)
    except Exception as e:
        break