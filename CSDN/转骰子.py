'''
题目描述
骰子是一个立方体，每个面一个数字，初始为左 1，右 2，前 3（观察者方向），后 4，上 5，下 6，用 123456 表示这个状态，
放置到平面上，
可以向左翻转（用 L表示向左翻转 1 次），
可以向右翻转（用 R 表示向右翻转 1 次），
可以向前翻转（用 F 表示向前翻转 1 次），
可以向后翻转（用 B 表示向后翻转 1 次），
可以逆时针旋转（用 A表示逆时针旋转 90 度），
可以顺时针旋转（用 C 表示顺时针旋转 90 度），
现从 123456 这个初始状态开始，根据输入的动作序列，计算得到最终的状态。

骰子的初始状态和初始状态转动后的状态如图所示


输入描述：
输入一行，为只包含 LRFBAC 的字母序列，最大长度 50，字母可重复
输出描述：
输出最终状态

示例1
输入：

LR
1
输出：

123456
1

'''
# 参考代码
# 从 123456，向左翻转 L , 563421，34位置保持不变；
# 从 123456，向左翻转 R , 653412，34位置保持不变；
# 从 123456，向前翻转 F , 125643，12位置保持不变；
# 从 123456，向后翻转 B , 126534，12位置保持不变；
# 从 123456，向左翻转 A , 431256，56位置保持不变；
# 从 123456，向左翻转 C , 342156，56位置保持不变；
#
# 在拆解小 数组下表变化：
# L：nums = nums[4:] + nums[2:4] + nums[:2][::-1]
# R：nums = nums[4:][::-1] + nums[2:4] + nums[:2]
# F：nums = nums[:2] + nums[4:] + nums[2:4][::-1]
# B：nums = nums[:2] + nums[4:][::-1] + nums[2:4]
# A：nums = nums[2:4][::-1] + nums[:2] + nums[4:]
# C：nums = nums[2:4] + nums[:2][::-1] + nums[4:]
#
# 然后顺序执行控制指令就可以了

while 1:
    try:

        nums = "123456"
        comm = input()
        for c in comm:
            if c == "L":
                nums = f"{nums[4:]}{nums[2:4]}{nums[:2][::-1]}"
            elif c == "R":
                nums = f"{nums[4:][::-1]}{nums[2:4]}{nums[:2]}"
            elif c == "F":
                nums = f"{nums[:2]}{nums[4:]}{nums[2:4][::-1]}"
            elif c == "B":
                nums = f"{nums[:2]}{nums[4:][::-1]}{nums[2:4]}"
            elif c == "A":
                nums = f"{nums[2:4][::-1]}{nums[:2]}{nums[4:]}"
            else:
                nums = f"{nums[2:4]}{nums[:2][::-1]}{nums[4:]}"
        print(nums)

    except Exception as e:
        break